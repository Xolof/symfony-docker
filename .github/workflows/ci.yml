name: CI

on:
  push:
    branches:
      - master
  pull_request: ~
  workflow_dispatch: ~

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Build Docker images
        uses: docker/bake-action@v6
        with:
          pull: true
          load: true
          files: |
            compose.yaml
            compose.override.yaml
          set: |
            *.cache-from=type=gha,scope=${{github.ref}}
            *.cache-from=type=gha,scope=refs/heads/master
            *.cache-to=type=gha,scope=${{github.ref}},mode=max

      - name: Prepare environment file
        run: |
          printf %s "${{ secrets.ENV_FILE }}" > .env.local
      -
        name: Start services
        run: docker compose up --wait --build
      -
        name: Debug PHP container logs
        if: failure() # Only run if the previous step failed
        run: docker compose logs php
      -
        name: Check HTTP reachability
        run: curl -v --fail-with-body http://localhost
      -
        name: Check HTTPS reachability
        if: false # Remove this line when the homepage will be configured, or change the path to check
        run: curl -vk --fail-with-body https://localhost
      -
        name: Check Mercure reachability
        run: curl -vkI --fail-with-body https://localhost/.well-known/mercure?topic=test
      -
        name: Create test database
        if: false # Remove this line if Doctrine ORM is installed
        run: docker compose exec -T php bin/console -e test doctrine:database:create
      -
        name: Run migrations
        if: false # Remove this line if Doctrine Migrations is installed
        run: docker compose exec -T php bin/console -e test doctrine:migrations:migrate --no-interaction
      -
        name: Run PHPUnit
        if: false # Remove this line if PHPUnit is installed
        run: docker compose exec -T php bin/phpunit
      -
        name: Doctrine Schema Validator
        if: false # Remove this line if Doctrine ORM is installed
        run: docker compose exec -T php bin/console -e test doctrine:schema:validate

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: |
            ./*

  lint:
    name: Docker Lint
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0

  deploy:
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app

      - name: Prepare environment files
        run: |
          printf %s "${{ secrets.ENV_FILE }}" > .env && printf %s "${{ secrets.ENV_FILE_LOCAL }}" > .env.local

      - name: Deploy with rsync
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: -avzr --delete
          path: .
          remote_path: ${{ secrets.DEPLOY_PATH }}
          remote_host: ${{ secrets.DEPLOY_HOST }}
          remote_user: ${{ secrets.DEPLOY_USER }}
          remote_key: ${{ secrets.DEPLOY_KEY }}

      - name: Set file permissions and run database migrations
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            # mkdir -p ${{ secrets.DEPLOY_PATH }}/storage/logs
            # touch ${{ secrets.DEPLOY_PATH }}/storage/logs/laravel.log
            chown -R ${{ secrets.DEPLOY_USER }}:${{ secrets.DEPLOY_USER }} ${{ secrets.DEPLOY_PATH }}
            find ${{ secrets.DEPLOY_PATH }}  -type d -exec chmod 755 {} \;
            find ${{ secrets.DEPLOY_PATH }}  -type f -exec chmod 644 {} \;
            # chmod -R 775 ${{ secrets.DEPLOY_PATH }}storage
            # chmod -R 775 ${{ secrets.DEPLOY_PATH }}bootstrap/cache
            # chmod 600 ${{ secrets.DEPLOY_PATH }}.env
            # chmod 600 ${{ secrets.DEPLOY_PATH }}.env.dev
