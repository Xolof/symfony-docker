name: CI

on:
  push:
    branches:
      - master
  pull_request: ~
  workflow_dispatch: ~

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - 
      name: Prepare environment file
      run:  |
            printf %s "${{ secrets.ENV_FILE }}" > .env.local && \
            printf %s "${{ secrets.ENV_FILE_TEST }}" > .env.test
    -
      name: Start services
      # run: docker compose up --wait --build
      run: docker compose -f compose.yaml -f compose.override.yaml up --wait --build

    - name: Wait for Database
      run: |
        until docker compose exec -T database mysql app_test -uroot -pbLas_regn42_ -e"SELECT 1;"; do echo "waiting for database..."; sleep 5; done;
    -
      name: Debug PHP container logs
      if: failure() # Only run if the previous step failed
      run: docker compose logs php
    -
      name: Run Composer Install
      run: docker compose exec -T php composer install
    -
      name: Run migrations
      run: docker compose exec -T php bin/console -e test doctrine:migrations:migrate --no-interaction
    -
      name: Debug PHP container logs
      if: failure()
      run: docker compose logs php
    -
      name: Run Rector
      run: docker compose exec -T php /app/vendor/bin/rector src templates config tests
    -
      name: Run PhpStan
      run: docker compose exec -T php /app/vendor/bin/phpstan analyse src --level=6 --memory-limit=1G
    -
      name: Run PHPUnit
      run: docker compose exec -T php bin/phpunit
    -
      name: Doctrine Schema Validator
      run: docker compose exec -T php bin/console -e test doctrine:schema:validate

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: app
        path: |
          ./*

  lint:
    name: Docker Lint
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0

  deploy:
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app

      - name: Prepare env file
        run: printf %s "${{ secrets.ENV_FILE }}" > .env
      - name: Prepare local env file
        run: printf %s "${{ secrets.ENV_FILE_LOCAL }}" > .env.local

      - name: Deploy with rsync
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: -avzr --delete
          path: .
          remote_path: ${{ secrets.DEPLOY_PATH }}
          remote_host: ${{ secrets.DEPLOY_HOST }}
          remote_user: ${{ secrets.DEPLOY_USER }}
          remote_key: ${{ secrets.DEPLOY_KEY }}

      - name: Set file permissions and run database migrations
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            chown -R ${{ secrets.DEPLOY_USER }}:${{ secrets.DEPLOY_USER }} ${{ secrets.DEPLOY_PATH }}
            find ${{ secrets.DEPLOY_PATH }}  -type d -exec chmod 755 {} \;
            find ${{ secrets.DEPLOY_PATH }}  -type f -exec chmod 644 {} \;
            cd ${{ secrets.DEPLOY_PATH }} && php8.4 bin/console doctrine:migrations:migrate --no-interaction
            # chmod 600 ${{ secrets.DEPLOY_PATH }}.env
            # chmod 600 ${{ secrets.DEPLOY_PATH }}.env.dev
